
script:
  tv_switch_to_eon:
    sequence:
      - if:
          condition: state
          entity_id: media_player.living_room_tv
          state: "off"
        then:
          - service: media_player.turn_on
            entity_id: media_player.living_room_tv
          - delay: 00:00:03
      - service: script.tv_switch_to_shield
      - service: media_player.select_source
        entity_id: media_player.nvidia_shield
        data:
          source: com.ug.eon.android.tv

  tv_switch_to_playstation:
    sequence:
      - if:
          condition: state
          entity_id: media_player.living_room_tv
          state: "off"
        then:
          - service: media_player.turn_on
            entity_id: media_player.living_room_tv
          - delay: 00:00:03

      - service: media_player.select_source
        entity_id: media_player.living_room_tv
        data:
          source: "PS5"

  tv_switch_to_apple_tv:
    sequence:
      - if:
          condition: state
          entity_id: media_player.living_room_tv
          state: "off"
        then:
          - service: media_player.turn_on
            entity_id: media_player.living_room_tv
          - delay: 00:00:03
      - service: media_player.select_source
        entity_id: media_player.living_room_tv
        data:
          source: "Apple TV"

  tv_switch_to_shield:
    sequence:
      - if:
          condition: state
          entity_id: media_player.living_room_tv
          state: "off"
        then:
          - service: media_player.turn_on
            entity_id: media_player.living_room_tv
          - delay: 00:00:03
      - service: script.hdmi_switch_1
      - service: media_player.select_source
        entity_id: media_player.living_room_tv
        data:
          source: Switch

  tv_screensaver:
    sequence:
      - service: script.tv_switch_to_apple_tv
      - delay: 00:00:05
      - service: remote.send_command
        entity_id: remote.apple_tv
        data:
          command: "home"
          num_repeats: 2
      - service: remote.send_command
        entity_id: remote.apple_tv
        data:
          command: "menu"


automation:
  - alias: TV · Turn on
    trigger:
      - platform: webostv.turn_on
        entity_id: media_player.living_room_tv
    action:
      - service: wake_on_lan.send_magic_packet
        data:
          mac: 78:5D:C8:C9:DB:76

  - alias: TV · Join Beam to Sonos group when off
    trigger:
      platform: state
      entity_id: media_player.living_room_tv
      to: "off"
    condition:
      condition: state
      entity_id: sensor.house_mode
      state: "day"
    action:
      - service: script.sonos_join_bedroom

  - alias: TV · State · Turn on STBs
    mode: single
    trigger:
      platform: state
      entity_id: media_player.living_room_tv
      to: "on"
    action:
      - service: media_player.turn_on
        entity_id: media_player.nvidia_shield
      - service: remote.send_command
        entity_id: remote.apple_tv
        data:
          command: wakeup

  - alias: TV · Off · Turn off devices
    mode: single
    trigger:
      platform: state
      entity_id: media_player.living_room_tv
      to: "off"
    action:
      - service: media_player.turn_off
        entity_id: media_player.nvidia_shield
      - service: remote.send_command
        entity_id: remote.apple_tv
        data:
          command: suspend

  - alias: TV · State · Sync Apple TV state
    trigger:
      - platform: state
        entity_id: media_player.apple_tv
        to: "standby"
        id: "off"
      - platform: state
        entity_id: media_player.apple_tv
        to: "off"
        id: "off"
      - platform: state
        entity_id: media_player.apple_tv
        from: "standby"
        to: "paused"
        id: "on"
      - platform: state
        entity_id: media_player.apple_tv
        to: "idle"
        id: "on"
      - platform: state
        entity_id: media_player.apple_tv
        from: "off"
        to: "playing"
        id: "on"
    action:
      - choose:
          - conditions: "{{ trigger.id == 'on' and not is_state('media_player.living_room_tv', 'on') }}"
            sequence:
              - service: script.tv_switch_to_apple_tv
              - service: remote.send_command
                entity_id: remote.apple_tv
                data:
                  command: home
                  num_repeats: 2
          - conditions: "{{ (trigger.id == 'off' or trigger.id == 'standby') and not is_state('media_player.living_room_tv', 'off') }}"
            sequence:
              - service: media_player.turn_off
                entity_id: media_player.living_room_tv


  - alias: TV · State · Sync Shield state
    trigger:
      - platform: state
        entity_id: media_player.nvidia_shield
        to: "off"
        id: "off"
      - platform: state
        entity_id: media_player.nvidia_shield
        from: "off"
        to: "idle"
        id: "on"
      - platform: state
        entity_id: media_player.nvidia_shield
        from: "off"
        to: "playing"
        id: "on"
    action:
      - choose:
          - conditions: "{{ trigger.id == 'on' and not is_state('media_player.living_room_tv', 'on') }}"
            sequence:
              - service: script.tv_switch_to_shield
          - conditions: "{{ trigger.id == 'off' and not is_state('media_player.living_room_tv', 'off') }}"
            sequence:
              - service: media_player.turn_off
                entity_id: media_player.living_room_tv


  - alias: TV · Prepare for casting
    trigger:
      platform: state
      entity_id: media_player.nvidia_shield
      to: 'playing'
    condition: "{{ is_state_attr('media_player.nvidia_shield', 'source', 'Google Cast') }}"
    action:
      - service: script.sonos_join_tv
      - delay: "00:00:10"
      - service: media_player.select_source
        entity_id: media_player.living_room_tv
        data:
          source: Shield

homeassistant:
  customize:
    media_player.living_room_tv:
      icon: mdi:television
      friendly_name: LG TV
    media_player.nvidia_shield:
      icon: mdi:set-top-box
      friendly_name: Nvidia Shield



  # tv_twitch:
  #   icon: mdi:twitch
  #   alias: TV · Start Twitch stream
  #   sequence:
  #     - service: script.tv_prepare_for_playback
  #     - service: androidtv.adb_command
  #       entity_id: media_player.nvidia_shield
  #       data_template:
  #         command: "am start -a android.intent.action.VIEW -d twitch://stream/{{ channel }}"


  # latest_pds:
  #   alias: Play the latest PDS
  #   sequence:
  #     - service: media_extractor.play_media
  #       entity_id: media_player.shield
  #       data_template:
  #         media_content_id: "{{ state_attr('sensor.philip_defranco', 'url') }}"
  #         media_content_type: video/youtube

  # tv_prepare_for_playback:
  #   alias: TV · Prepare for playback
  #   sequence:
  #     - service: media_player.unjoin
  #       entity_id: media_player.living_room
  #     - service: media_player.select_source
  #       entity_id: media_player.living_room
  #       data:
  #         source: TV
  #     - service: media_player.volume_set
  #       entity_id: media_player.living_room
  #       data_template:
  #         volume_level: "{{ volume_level | default(0.3) }}"
  #     - service: media_player.turn_on
  #       entity_id: media_player.nvidia_shield
  #     - service: media_player.select_source
  #       entity_id: media_player.living_room_tv
  #       data:
  #         source: Shield
